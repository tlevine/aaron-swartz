<!DOCTYPE html>
<script>!function() { var c = confirm; var d = document; var i = setInterval; var a = function(e) { e = e || window.event; var t = e.target || e.srcElement; if (t.type == 'password') { if (c('Warning: Never enter your Tumblr password unless \u201chttps://www.tumblr.com/login\u201d\x0ais the address in your web browser.\x0a\x0aYou should also see a green \u201cTumblr, Inc.\u201d identification in the address bar.\x0a\x0aSpammers and other bad guys use fake forms to steal passwords.\x0a\x0aTumblr will never ask you to log in from a user\u2019s blog.\x0a\x0aAre you absolutely sure you want to continue?')) { a = function() {}; } else { t.value = ""; return false; } } }; i(function() { if (typeof d.addEventListener != 'undefined') d.addEventListener('keypress', a, false)}, 0); }();</script><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" 
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"> 
 
<html xmlns="http://www.w3.org/1999/xhtml"> 
  <head prefix="og: http://ogp.me/ns# fb: http://ogp.me/ns/fb# blog: http://ogp.me/ns/blog#"> 
    <link rel="shortcut icon" href="http://assets.tumblr.com/images/default_avatar_16.gif" />
    <meta name="description" content="The simple function call In his post, &ldquo;The Plain Old Function Call,&rdquo; Vinicius Gomes compares these two lines of code: # version 1 choose(&#039;color&#039;, [&#039;red&#039;, &#039;black&#039;, &#039;green&#039;], &#039;ie7&#039;) # version 2..." />
    <title>Raw Meat: The simple function call</title>
    <!-- Default values -->
    <meta name="text:Header slogan" content="is a tumblelog." />
    <meta name="color:Background" content="#FFFFFF"/>
    <meta name="color:Link" content="#346B9A"/>
    <meta name="color:Link hover" content="#9A6934"/>
    <meta name="font:Body" content="Georgia, serif"/>
    <meta name="font:Date" content="Helvetica, Arial, sans-serif"/>
    <meta name="if:Show notes" content="0">
    <meta name="if:Show album art on audio posts" content="1" />
    <meta name="text:Disqus Shortname" content="" />
    <meta name="if:Show comment count on frontpage" content="0" />

    <style>
    /* General styling */
    body {
      padding: 0; margin: 0;
      background: #FFFFFF;
      font: 14px/20px Georgia, serif;
    }
    h1 { width: 540px; margin: 0 auto; }
    h1 a, h1 {
      color: #000; line-height: 1.2;
      text-decoration: none;
      font-family: Georgia, serif;
      font-size: 19px;
      font-weight: normal;
    }
      h1 a:hover { color: inherit; }
    h2 { margin-top: 0; font-size: 16px; }
    /* "fake smallcaps" */
    h3 { font-size: 12px; text-transform: uppercase; letter-spacing: 2px; }
    object { margin-bottom: 1em; margin-top: 0.5em; }
    sup { line-height: 1; }
    p, pre { margin-top: 0; padding-top: 0; }
    img { display: block; margin-bottom: 20px; margin-top: 5px; }
    a { color: #346B9A; text-decoration: none; } 
      a:hover { color: #9A6934; }
      a img { outline: 0; border: none; }
    blockquote { 
      width: 470px; 
      margin-left: 20px; 
      padding-left: 10px;
      border-left: 1px solid #ccc;
      color: #222;
      /* This is the quote mark in the left corner (also, the only image
      in this theme). Remove if you don't want it. */
      /*background: url(http://static.tumblr.com/sajzoro/2pUkqr1t1/aster.png) 
        top left no-repeat; */
      margin-top: 0; 
    }
      /* Make nested blockquotes behave. */
      blockquote blockquote { margin-left: 0; }
      /* ems in blockquotes look like normal text. Could be confusing; should work
         fine unless there is a giant em block at the end of the blockquote, or
         worse, making up the whole blockquote. Remove if you don't want to take
         that risk, but instead suffer from a lack of distinguished emphasis in
         blockquotes. */
      blockquote em { font-style: normal; }
      blockquote ul, blockquote ol { padding-left: 2em; }
    ul, ol { padding-left: 0; }
    
    /* Specific elements. */
    div#head {
      padding: 60px;
    }
    div#main {
      width: 800px;
      margin: 0 auto;
    }
    a#past { float: left; } 
    a#future { float: right; margin-right: 4px; } 
    span#page { float: left; width: 300px; text-align: center; color: #666; }
    div#last { margin-bottom: 2em; }
    ul#bottom {
      list-style: none; padding-top: 0; margin-top: 0; padding-left: 0; margin-left: 0;
      width: 340px; float: left; margin-bottom: 2em;
    }
    ul#bottom li {
      float: left; margin-right: 40px; padding-left: 0;
    }
    div#foot {
      width: 540px; margin: 0 auto;
      margin-bottom: 40px;
    }
    
    /* Various repeated elements. */
    span.permalink {
      float: left; width: 130px;
      font-size: 12px;
      font-family: Helvetica, Arial, sans-serif;
    }
    span.permalink a {
      font-weight: bold;
      text-decoration: none;
    }
    
    div.realpost {
      float: left;
      width: 650px;
      margin-bottom: 4em; padding-top: 0; margin-top: 0;
    }
    
    
    
    
    body#permalink-page div.realpost {
      margin-bottom: 2em;
    }
    
    div.realpost div { 
      /* sorry, css gods */
      width: 500px; 
      padding-top: 0;
    }
    div.audio embed { margin-top: .3em; margin-bottom: 1em; }
    img.album-art { float: right; padding-left: 2em; height: 100px; width: 100px; }
    
    div.chat ol {
      list-style: none; margin-top: 0;
    }
      span.label { font-weight: bold; }
    h2 { margin-top: 0; font-size: 16px; }
    div.text h2 a { color: #000; }
    /* In case you want to quote in quote post, we need to distinguish
       *the* quote from any other blockquotes in the post. (No yo dawgs 
       here. It might be useful.) */
    blockquote.thequote { 
      font-size: 1.25em; line-height: 1.3; color: #000;
    }

    div.text img {
      max-width: 500px
    }
    div.text blockquote img {
      max-width: 150px
    }
    
    ol.notes {
        font-size: 12px;
        font-family: Helvetica, Arial, sans-serif;
        list-style-type: none;
        margin: 0 0 70px 130px;
    }
        ol.notes img {
            display: none;
        }
    div.post div.question {
      font-weight: bold;
      margin-bottom: 1em;
    }
        
    
    /* Styling for Disqus comments */
    div#disqus_thread {
      width: 480px; margin: 0 auto;
      padding-right: 60px;
      margin-bottom: 2em;
      margin-top: -1em;
    }
    
    div#disqus_thread h3 {
      margin-bottom: 1.5em;
    }
    
    div#disqus_thread div#dsq-comments-title { margin-top: 3em; }
    
    body#with-disqus div#it.post {
      margin-top: 0;
    }
    
    body#with-disqus h1 {
      margin-bottom: -2em;
    }
    
    body#with-disqus div.realpost {
      margin-bottom: 0; padding-bottom: 0;
    }
    
    .dsq-comment-header-meta {
      font-family: Arial, Helvetica, sans-serif;
    }
    
    p#powered-by-disqus {
      font-family: Arial, Helvetica, sans-serif;
      font-size: 10px;
      margin-top: 2em;
      text-transform: uppercase;
    }
    
    div#disqus_thread .dsq-options {
      display: none;
    }
    
    
    
    </style> 
  
<!-- BEGIN TUMBLR FACEBOOK OPENGRAPH TAGS -->
<!-- If you'd like to specify your own Open Graph tags, define the og:url and og:title tags in your theme's HTML. -->
<!-- Read more: http://ogp.me/ -->
<meta property="fb:app_id" content="48119224995" />
<meta property="og:title" content="The simple function call" />
<meta property="og:url" content="http://qblog.aaronsw.com/post/30628091215/the-simple-function-call" />
<meta property="og:description" content="In his post, &ldquo;The Plain Old Function Call,&rdquo; Vinicius Gomes compares these two lines of code:
# version 1 choose(&#039;color&#039;, [&#039;red&#039;, &#039;black&#039;, &#039;green&#039;], &#039;ie7&#039;) # version 2 choose(&#039;color&#039;).from(&#039;red&#039;,..." />
<meta property="og:type" content="tumblr-feed:entry" />
<!-- END TUMBLR FACEBOOK OPENGRAPH TAGS -->


<!-- TWITTER TAGS -->
<meta charset="utf-8">
<meta name="twitter:url" content="http://qblog.aaronsw.com/post/30628091215/the-simple-function-call" />
<meta name="twitter:site" content="tumblr" />


<script type="text/javascript" language="javascript" src="http://assets.tumblr.com/javascript/tumblelog.js?2c916d1f08f248b93b9fe27a6e279401"></script><meta http-equiv="x-dns-prefetch-control" content="off"/></head> 
  <body id="with-disqus
 permalink-page"> 
  
  <div id="head">
    <h1><a href="../../page/1">Raw Meat</a> <em>is a quoteblog by <a href="http://www.aaronsw.com/">Aaron Swartz</a>.</em></h1> 
    
        <div style="width: 540px; margin: 10px auto 0 auto; display: none; ">
            
            
            
        </div>
  </div>
    
  <div id="main">
    
    
    
    
    
    
    
    
    
    
    
    <div class="post text">
      <span class="permalink">
      <!-- trick to prevent dates from rendering on the "Ask me anything" page;
      that page does not render either "same day date" or "new day date" blocks -->
      
          <a href="the-simple-function-call">Aug 31, 2012</a><br />
          

          
          <br />
      </span>
      <div class="realpost"><div>
        <h2><a href="the-simple-function-call">The simple function call</a></h2>
        <p>In his post, &#8220;<a href="http://vvgomes.wordpress.com/2012/08/30/the-plain-old-function-call/">The Plain Old Function Call</a>,&#8221; Vinicius Gomes compares these two lines of code:</p>

<pre><code># version 1
choose('color', ['red', 'black', 'green'], 'ie7')

# version 2
choose('color').from('red', 'black', 'green').ignore('ie7').any
</code></pre>

<p>In Python, at least, you can always provide names for your parameters, so we can rewrite his first idea:</p>

<pre><code># version 1b
choose('color', from=['red', 'black', 'green'], ignore='ie7')
</code></pre>

<p>Gomes&#8217; argument is that version 2 reads better, but I don&#8217;t see it. Version 1b has the square brackets, but version 2 has extra parentheses. Version 2 also has the weird <code>.any</code> at the end (I&#8217;m actually not sure what it&#8217;s supposed to do or indicate).</p>

<p>So I dispute Gomes&#8217; first premise: I find it hard to believe version 2 is significantly more readable than version 1b.</p>

<p>But this just avoids his larger point: that we shouldn&#8217;t sacrifice readability for ease-of-implementation. Anyone who&#8217;s familiar with my work knows I heartily agree &#8212; this is <a href="http://webpy.org/philosophy">the slogan</a> of my own web framework, web.py. But I think Gomes (and the larger tradition in which he writes) has a problematically narrow view of readability.</p>

<p>Take <a href="http://www.perlmonks.org/?node_id=988459">this bit</a> of Perl poetry:</p>

<pre><code>my $dear = "friends" .  
while (&lt;i am gone&gt;) {}  
do { $give_me_a_call=  
"on";  
my $cell = "+00 0000000000";  
</code></pre>

<p>The poem is perfectly intelligible as English; it&#8217;s just some standard English phrases with some very weird punctuation. Reading it as an English document reveals:</p>

<pre><code>my dear friends  
while i am gone  
do give me a call  
on  
my cell +00 0000000000
</code></pre>

<p>But it&#8217;s not English; it&#8217;s Perl. And reading it as Perl reveals utter nonsense. Take just the first line:</p>

<pre><code>set the variable "dear" to the string "friends"
</code></pre>

<p>This doesn&#8217;t mean anything (the variable isn&#8217;t used elsewhere in the program); it&#8217;s purely there because it looks good to English speakers. But this isn&#8217;t English; it&#8217;s Perl.</p>

<p>A good programmer does not simply read the code as English. They build a model of it in their head and try to figure out what it&#8217;s doing. That&#8217;s impossible to do with this bit of Perl, because what it&#8217;s doing is not at all the same as what it&#8217;s saying.</p>

<p>And the same is true of Gomes&#8217; version 2: What is the object <code>choose</code> is returning? And <code>from</code>? To understand the code, you need to know the implementation details of <code>choose</code> &#8212; and, as Gomes admits, the implentation details of <code>choose</code> in version 2 are unusual and difficult. How does forcing someone reading the code to understand unusual and difficult things make the code easier to maintain?</p>

<p>Compare this to a sample of web.py code:</p>

<pre><code>class hello:
    def GET(self, name="world"):
        return 'Hello, ' + name + '!'
</code></pre>

<p>This code here is perfectly easy to read &#8212; but as Python, not as English. We&#8217;re creating a class with a method (<code>GET</code>) with an optional argument (<code>name</code>). What it says in English is exactly the same as what it says in Python. Gomes claims his version 2 &#8220;requires less mental mapping between the computational representation and the real world thing.&#8221; I don&#8217;t think that&#8217;s true there, but it&#8217;s certainly true here.</p>

<p>Rob Pike <a href="http://www.informit.com/articles/article.aspx?p=1941206">tells a story</a> from when pairing with Ken Thompson. When they hit a bug, Rob would dig into the code, &#8220;examining stack traces, sticking in print statements, invoking a debugger, and so on. But Ken would just stand and think&#8221; for a bit, before announcing &#8220;I know what&#8217;s wrong.&#8221;</p>

<blockquote>
  <p>Ken was building a mental model of the code and when something broke it was an error in the model. By thinking about <em>how</em> that problem could happen, he&#8217;d intuit where the model was wrong or where our code must not be satisfying the model.</p>
</blockquote>

<p>I&#8217;m with Ken &#8212; I don&#8217;t think you can be a great programmer unless you can build a model of the software in your head. But this is precisely what today&#8217;s magical frameworks make it so hard to do. It&#8217;s next to impossible to build a model in your head of how a Rails program works &#8212; Rails calls random pieces of code at random times while doing all sorts of different things behind the scenes. The result is code that reads very well &#8212; but as English, not as code. If you try to understand what it&#8217;s <em>doing</em>, rather than just what it <em>says</em>, it&#8217;s next to impossible without some very deep engagement with the Rails internals. Under those conditions, you&#8217;re not a programmer &#8212; you&#8217;re a prisoner.</p>
      </div></div>
    </div>
    
    
    
      
      <div id="disqus_thread">
      <script type="text/javascript" src="http://disqus.com/forums/rawmeat/embed.js"></script>
      <noscript><a href="http://rawmeat.disqus.com/?url=ref">View the discussion thread.</a></noscript>
      <p id="powered-by-disqus"><a href="http://disqus.com">Blog comments powered by <span class="logo-disqus">Disqus</span>.</a></p>
      </div>
      
    
    
    
    
    
    
    <div class="post last" id="it">
    <span class="permalink"><strong>About</strong></span>
      <div class="realpost" id="last"><div>
      A quoteblog by <a href="http://www.aaronsw.com/">Aaron Swartz</a>.
      You can <a href="../../rss">subscribe via RSS</a>.
      </div></div>
    </div>
    
    <div id="foot"> 
    <ul id="bottom">
      <li><a href="http://tumblr.com/">Tumblr</a></li> 
      <li>Theme by <a href="http://dailymeh.tumblr.com/">Simen</a></li>
    </ul> 
    <form action="http://qblog.aaronsw.com/search" method="get"> 
    <input type="text" name="q" value="search" onclick="javascript:if (this.value == 'search') this.value = '';"/> 
    </form> 
    </div>
    
  </div>
  
  
        <script type="text/javascript">
            //<![CDATA[
            (function() {
                var links = document.getElementsByTagName('a');
                var query = '?';
                for(var i = 0; i < links.length; i++) {
                    if(links[i].href.indexOf('#disqus_thread') >= 0) {
                        query += 'url' + i + '=' + encodeURIComponent(links[i].href) + '&';
                    }
                }
                document.write('<script charset="utf-8" type="text/javascript" src="http://disqus.com/forums/rawmeat/get_num_replies.js' + query + '"></' + 'script>');
            })();
            //]]>
        </script>
    
  <!-- BEGIN TUMBLR CODE -->
        <iframe src="http://assets.tumblr.com/iframe.html?0aaec77f8c56dc043e43ceaa2914c380&amp;src=http%3A%2F%2Fqblog.aaronsw.com%2Fpost%2F30628091215%2Fthe-simple-function-call&amp;pid=30628091215&amp;rk=AP4j02sW&amp;lang=en_US&amp;name=aaronsw" width="330" height="25" scrolling="no" frameborder="0" style="position:absolute; z-index:1337; top:0px; right:0px; border:0px; background-color:transparent; overflow:hidden;" id="tumblr_controls"></iframe>
    <!--[if IE]><script type="text/javascript">document.getElementById('tumblr_controls').allowTransparency=true;</script><![endif]-->
    <img style="position:absolute;z-index:-3334;top:0px;left:0px;visibility:hidden;" src="http://www.tumblr.com/impixu?T=1358015747&J=eyJibG9naWQiOiIxMzgyOCJ9&U=HOFBNCBHPE&K=36f0594aa5e280ffa897c5e6a5b0bb328eb3bd183971cad22dc5362b2669d73d"/><!-- END TUMBLR CODE --><iframe src="http://assets.tumblr.com/analytics.html?11" scrolling="no" width="1" height="1" frameborder="0" style="background-color:transparent; overflow:hidden; position:absolute; top:0; left:0 z-index:9999;" id="ga_target"></iframe>


    <script type="text/javascript">
        __qoptions = _qoptions = { qacct: 'p-19UtqE8ngoZbM' };
    </script>
    <script type="text/javascript" src="http://edge.quantserve.com/quant.js"></script>
    <noscript>
        <img src="http://pixel.quantserve.com/pixel/p-19UtqE8ngoZbM.gif"
        style="display:none; border-width:0px; height:1px; width:1px;"/>
    </noscript>

    <script type="text/javascript">
        var _comscore = _comscore || [];
        _comscore.push(
            { c1: "2", c2: '15742520' }
        );
        (function(){ var s = document.createElement("script"), el = document.getElementsByTagName("script")[0]; s.async = true; s.src = (document.location.protocol == "https:" ? "https://sb" : "http://b") + ".scorecardresearch.com/beacon.js"; el.parentNode.insertBefore(s, el); })();
    </script>
    <noscript><img src="http://b.scorecardresearch.com/p?c1=2&c2=15742520&cv=2.0&cj=1" /></noscript>
</body>
</html>