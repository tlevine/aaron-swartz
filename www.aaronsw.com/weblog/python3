<!DOCTYPE html>
<html>
<head>
  <title>How Python 3 Should Have Worked (Aaron Swartz's Raw Thought)</title>
  <link rel="home" href="index.html" title="Home" />
  <link rel="stylesheet" href="oldstyle.css" type="text/css" />
</head>
<body>	
<h1 class="title"><a href="index.html" class="hilite" title="by Aaron Swartz">Raw Thought</a></h1>	
<p class="byline" style="float: right">by <a href="../index.html">Aaron Swartz</a></p>

<div class="content">
<h1>How Python 3 Should Have Worked</h1>

<p>As a workaday Python developer, it&#8217;s hard to shake the feeling that the Python 2 to 3 transition isn&#8217;t working. I get occasional requests to make my libraries work in 3 but it&#8217;s far from clear how to and when I try to look it up I find all sorts of conflicting advice, none of which sounds very practical.</p>

<p>Indeed, when you see new 3.x versions rolling off the line and no one using them, it&#8217;s hard to shake the feeling that Python might die in this transition. How will we ever make it across the chasm?</p>

<p>It seems to me that in all the talk about Python 3000 being a new, radical, blue-sky vision of the future, we neglected the proven methods of getting there. In the Python 2 era, we had a clear method for adding language changes:</p>

<ol>
<li><p>In Python 2.a, support for <code>from __future__ import new_feature</code> was added so you could use the new feature if you explicitly declared you wanted it.</p></li>
<li><p>In Python 2.b, support was added by default so you could just use it without the future declaration.</p></li>
<li><p>In Python 2.c, warnings begun being issued when you tried to use the old way, explaining you needed to change or your code would stop working.</p></li>
<li><p>In Python 2.d, it actually did stop working.</p></li>
</ol>

<p>It seems to me this process worked pretty well. And I don&#8217;t see why it couldn&#8217;t work for the Python 3 transition. This would mean mainly just:</p>

<ol>
<li>A Python 2.x release that added support for <code>from __future__ import python3</code>.</li>
</ol>

<p>Putting this at the top of a file would declare it to be a Python3 file and allow the interpreter to parse it accordingly. (I realize behind the scenes this would mean a lot of work to merge tr 2 and 3 interpreters, but honestly it would always have been better to have a unified codebase to maintain.)</p>

<p>Then if I wanted my Python 2 program to use some 3 modules, I just need to make sure those modules have the import line at the top. If I want to do a new release of my module that works on Python 3, I just need to declare that it only works in Python 2.x and higher and release a version that&#8217;s been run through 2to3 (with the new import statement). If my project is big, I can even port files to 3 one at a time, leaving the rest as 2 until someone gets around to fixing the rest. Most importantly, I can start porting to Puhon 3 without waiting for all my dependencies to do the same, parallelizing what until now has been a rather serial process.</p>

<p>Users know they can safely upgrade to 2.x since it won&#8217;t break any existing code. Developers know everyone will eventually upgrade to 2.x so they can drop support for earlier versions. But since 2.x supports code that also runs in 3, they can start writing and releasing code that&#8217;s future-compatible as well. Eventually the vast major code will work in 3 and users can upgrade to 3. (2.x will issue warnings to the remaining stragglers.) Finally, we can drop support for 2.x and all live happily having crossed the bridge together.</p>

<p>This isn&#8217;t a radical idea. It&#8217;s how Python upgrades have always worked. And unless we use it again, I don&#8217;t see how we&#8217;re ever going to cross this chasm.</p>


<p><i>You should follow me on twitter <a href="http://twitter.com/aaronsw">here</a>.</i></p>
<p class="posted">March  9, 2012</p>

<script type="text/javascript"><!--
if (document.location.hash.substring(0, 2) != '#c') {
  document.write('<style type="text/css">#comments_body { display: none}</style>');
}
//--></script>

<div id="comments_body">


<h2 id="comments">Comments</h2>

<div id="c1">
<p>Hi Aaron,</p>

<p>Been a while, mate. Anyway I think one can accept your points as valid without despairing about &#8220;crossing the chasm.&#8221; The transition from Python 1.x to 2.x was similarly slow, and I&#8217;m pretty sure 1.52 was still more heavily used by the time 2.2 emerged. I think the fact that it takes a while is actually a testament to Python&#8217;s success.</p>

<p>&#8212;Uche</p>

<p class="posted">posted by <a rel="nofollow" href="http://uche.ogbuji.net">Uche Ogbuji</a>
 on March 10, 2012 <a href="python3#c1" rel="bookmark">#</a></p>
</div>
<div id="c2">
<p>Some of these thoughts have occurred to me as well recently, except I&#8217;m a bit more pessimistic than you.  I&#8217;ve debated writing a &#8220;Python&#8217;s Dark Age?&#8221; piece.  It&#8217;s not just py3k, but pypy, and numpy+scipy that have me a bit gloomy with all the fragmentation of focus.   In some ways I think Py3K wasn&#8217;t a big enough change if they were going to break backwards compatibility.  They should have added much more thorough functional programming underpinnings, etc..  Implementation wise, CPython is terrribly slow, especially when compared to Javascript these days, which, if anything, is even more dynamic than Python, and has been approaching C-like speeds with the new JITs.  And with cross-compiled languages like Coffeescript, even Python&#8217;s syntax is looking clunky in some ways.</p>

<p>PyPy is very promising but it is not numpy, scipy compatible, which are the main reasons I stick around in Python these days.  PyPy is also 2.7 compat. I believe, so Python 3K is truly sitting out there all alone.   Though I consider myself a Python guru, and use it quite a lot, there are a couple of other languages I would consider switching too for evertyhing if I could: CoffeeScript/JS + node, Lua + LuaJIT, Haskell, Mono C# even&#8230; have you seen the awesome new async features being added to C#?  Sigh.</p>

<p class="posted">posted by Craig
 on March 10, 2012 <a href="python3#c2" rel="bookmark">#</a></p>
</div>
<div id="c3">
<p>Aaron, python will not die out because of 3x and i will explain why.  I&#8217;m a senior in high school, i started coding 2 years ago on python and everybody suggested i start with 2.7 because there is no real &#8220;community&#8221; or books for 3x beginners yet.  I then read an article dated 1999! about the early adapters of 2x when 1.5 was being phased out.  It spoke about new coders or beginners being taught in 2x. How educational institutions, teaching blank slate students will give them a head start by early adapting 2x.guess what? thats exactly what happened, and who uses 1.5.2 now? that being said, 2x was backwards compatible with 1.5.2. The point is though, this year our compsci classes started coding in 3.2.2. a lot of teachers are starting to teach in 3.2.2. the younger guys are going to do the porting for popular 2x modules, its gonna take a little time but it will happen.  you will start to see a lot of people in a few years who never used 2x but are pro coders in 3x. plus the problem i had 2 years ago is no longer a problem, there are plenty of great beginners books and on-line tutorials available now for 3x.  don&#8217;t get left behind buddy, adapt!</p>

<p class="posted">posted by Mike
 on March 11, 2012 <a href="python3#c3" rel="bookmark">#</a></p>
</div>
<div id="c4">
<p>I have no doubt that Python 3 will win the day in the end. It is taking a while but it is no Perl 6.</p>

<p>I am a huge fan of Mono as well and the async stuff is going to be great. You cab even use IronPython on Mono and just use C# with async/await where it makes sense. Or you can use F# for key parts. The ability to mix and match languages in a single codebase is one the great strengths of Mono.</p>

<p class="posted">posted by Justin
 on March 12, 2012 <a href="python3#c4" rel="bookmark">#</a></p>
</div>

<p>You can also <a href="mailto:weblog@aaronsw.com">send comments by email</a>.</p> 

<form action="http://www.aaronsw.com/weblog/code/comment.cgi" method="post">
<input type="hidden" name="eid" value="python3" />
<table>
<tr><th>Name</th><td> <input type="text" name="name" /></td></tr>
<tr><th>Site</th><td><input type="text" name="url" value="http://" /></td></tr>
<tr><th>Email</th><td><input type="text" name="email" /> (only used for direct replies)</td></tr>
<tr><td colspan="2"><textarea name="content" rows="10" cols="50"></textarea></td></tr>
<tr><td colspan="2"><input type="submit" value="Publish" /> <em>Comments may be edited for length and content.</em></td></tr>
</table>
</form>
<p></p>

</div>

<script type="text/javascript"><!--
function showComments() {
  document.getElementById('comments_show').style.display='none';
  document.getElementById('comments_body').style.display='block';
  return false;
}
if (document.location.hash.substring(0, 2) != '#c') {
  document.write('<p id="comments_show"><a href="#comments" onclick="return showComments();">Read comments.</a></p>');
}
//--></script>

</div> 

<p class="footertag"><a href="http://theinfo.org/">Powered by theinfo.org.</a></p>

</body> 
</html>